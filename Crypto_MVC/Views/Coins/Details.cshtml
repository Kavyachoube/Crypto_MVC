@using Newtonsoft.Json
@model Crypto_MVC.Models.Coin

@{
    ViewData["Title"] = Model?.Name ?? "Coin Not Found";
}

<link rel="stylesheet" href="~/css/site.css">

@if (Model == null)
{
    <div class="error-message">
        <h1>Coin details not available</h1>
        <p>Sorry, we couldn't fetch the details for the coin. Please try again later or check the coin ID.</p>
        <a href="/Coins" class="back-btn">🔙 Back to Coins</a>
    </div>
}
else
{
    <div class="coin-container">
        <!-- Left Panel: Coin Overview -->
        <div class="coin-overview">
            <div class="coin-header">
                <img src="@Model.Image" alt="@Model.Name Logo" class="coin-logo">
                <h1>@Model.Name (@Model.Symbol?.ToUpper())</h1>
                <span class="price-change @(Model.PriceChangePercentage24h >= 0 ? "positive" : "negative")">
                    @(Model.PriceChangePercentage24h?.ToString("0.00") ?? "0.00")%
                </span>
                <button class="watchlist-btn">⭐ Add to Watchlist</button>
            </div>

            <!-- Graph Section -->
            <div class="coin-graph">
                <canvas id="coinChart"></canvas>
            </div>

            <!-- Stats Section -->
            <div class="coin-stats">
                <p>Market Cap Rank: @(Model.MarketCapRank > 0 ? $"#{Model.MarketCapRank}" : "N/A")</p>
                <p>Market Cap: $@(Model.MarketCap.ToString("N0"))</p>
                <p>Volume (24h): $@(Model.TotalVolume.ToString("N0"))</p>
                <p>Circulating Supply: @(Model.CirculatingSupply > 0 ? $"{Model.CirculatingSupply:N0} {Model.Symbol?.ToUpper()}" : "N/A")</p>
            </div>
        </div>

        <!-- Right Panel: Information and Description -->
        <div class="coin-info">
            <h2>Information</h2>
            <a href="@Model.Links?.Homepage?.FirstOrDefault()" target="_blank">🌐 Website</a>
            <a href="@Model.Links?.Repos?.Github?.FirstOrDefault()" target="_blank">🐙 Github</a>
            @if (!string.IsNullOrEmpty(Model.Links?.Twitter))
            {
                <a href="https://twitter.com/@Model.Links.Twitter" target="_blank">🐦 Twitter</a>
            }

            <h2>Description</h2>
            <p>@(Model.Description?.ContainsKey("en") == true ? Model.Description["en"] : "Description not available")</p>
        </div>
    </div>

    <!-- Chart.js Script -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('coinChart').getContext('2d');
        const data = @Html.Raw(JsonConvert.SerializeObject(Model.Sparkline?.Price ?? new List<double>()));


        if (data.length === 0) {
            document.querySelector(".coin-graph").innerHTML = "<p>No price data available.</p>";
        } else {
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map((_, index) => index),
                    datasets: [{
                        label: 'Price (USD)',
                        data: data,
                        borderColor: 'rgb(75, 192, 192)',
                        fill: false
                    }]
                }
            });
        }
    </script>
}
