@using Newtonsoft.Json
@model Crypto_MVC.Models.CoinDetail
@{
    ViewData["Title"] = $"{Model.Name} Details - CryptoVerse";
}

<div class="container my-5">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="text-white">@Model.Name (@Model.Symbol.ToUpper())</h1>
        <span class="badge bg-success fs-5"> @Model.PriceChangePercentage24h?.ToString("0.00")% </span>
    </div>

    <!-- Details and Chart Section -->
    <div class="row">
        <!-- Left Section (Coin Details + Chart) -->
        <div class="col-lg-8">
            <div class="card bg-dark text-white p-4">
                <div class="d-flex justify-content-between mb-3">
                    <div class="d-flex align-items-center">
                        <img src="@Model.Image" alt="@Model.Name Logo" class="me-3" width="50" height="50">
                        <h4>@Model.Name</h4>
                    </div>
                    <button class="btn btn-primary">Add to Watchlist</button>
                </div>

                <!-- Chart Placeholder with Error Handling -->
                @if (Model.Sparkline?.Price != null && Model.Sparkline.Price.Any())
                {
                    <canvas id="priceChart"></canvas>
                }
                else
                {
                    <p>No Sparkline data available for this coin.</p>
                }

                <!-- Market Stats -->
                <div class="row mt-4">
                    <div class="col-md-3">
                        <p><strong>Market Cap Rank:</strong> #@Model.MarketCapRank</p>
                    </div>
                    <div class="col-md-3">
                        <p><strong>Market Cap:</strong> $@Model.MarketCap.ToString("N0")</p>
                    </div>
                    <div class="col-md-3">
                        <p><strong>Volume (24h):</strong> $@Model.TotalVolume.ToString("N0")</p>
                    </div>
                    <div class="col-md-3">
                        <p><strong>Circulating Supply:</strong> @Model.CirculatingSupply.ToString("N0") BTC</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Section (Info and Description) -->
        <div class="col-lg-4">
            <!-- Information Section with Null Checks -->
            <div class="card bg-dark text-white p-4 mb-3">
                <h5>Information</h5>
                <p>
                    <a href="@(Model.Links?.Homepage?.FirstOrDefault() ?? "#")" target="_blank" class="text-primary">🌐 Website</a>
                </p>
                <p>
                    <a href="@(Model.Links?.Repos?.Github?.FirstOrDefault() ?? "#")" target="_blank" class="text-success">💻 Github</a>
                </p>
                <p>
                    <a href="https://twitter.com/@(Model.Links?.Twitter ?? "#")" target="_blank" class="text-info">🐦 Twitter</a>
                </p>
            </div>

            <!-- Description Section with Null Checks -->
            <div class="card bg-dark text-white p-4">
                <h5>Description</h5>
                <p>
                    @(Model.Description != null && Model.Description.ContainsKey("en")
                        ? Model.Description["en"]
                        : "Description not available.")
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const sparklineData = @Html.Raw(JsonConvert.SerializeObject(Model.Sparkline?.Price ?? new List<double>()));

        if (sparklineData.length) {
            const ctx = document.getElementById('priceChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: sparklineData.map((_, index) => index),
                    datasets: [{
                        label: 'Price (USD)',
                        data: sparklineData,
                        borderColor: '#00b894',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { display: false },
                        y: { beginAtZero: false }
                    }
                }
            });
        }
    </script>
}
